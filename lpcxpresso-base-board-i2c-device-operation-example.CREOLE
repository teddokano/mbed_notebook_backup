<table border="1"> <tbody> <tr> <td>このページは日本語でも記載されています．<a href="#japanese">日本語版はこのページ後半</a>をご覧ください．</td> <td>This page is written in Japanese as well. Please find it in <a href="#japanese">2nd half of this page</a>.</td> </tr> </tbody> </table> <h2><strong>What is this?</strong></h2> <p>These are sample/demo codes for the <strong>"<a href="http://www.embeddedartists.com/products/lpcxpresso/xpr_base.php">LPCXpresso base board</a></strong><strong>"</strong> operation. <br>This is intened to use <em><strong>basic training sessions for new mbed users</strong></em>.</p> <blockquote> <p>The LPCXpresso base board's schematic and user manual are available on Embedded Artist's web site.</p> <p>It seems those information are available only for the users who complete the registration with a base board's serial number. <br>So please find detail information for the base board on their web site.</p> </blockquote> <h2>Code:</h2> <p>3 programs (#1..#3) has been made as samples for this base board hands-on. Those programs will be used in each training steps.</p> <p>It will explain how to access the I2C devices on the base board. <br>The programs access to the I2C devices through <strong>pin28</strong> and <strong>pin27</strong> of mbed.</p> <h3>STEP1...</h3> <p><span>1st target device is an <strong>I/O port expander: PCA9532</strong> (I2C_address:0xC0) that controls 16 LEDs on its output pins. <br>First program shows the access to the PCA9532 using "I2C write" function. <br>In the training session, attendee can learn how to call the i2c.write() with the I2C_address, register address and data.<br></span></p> <p>program_#1..."a simple version"</p> <p><a class="mcepp" href="http://mbed.org/users/okano/programs/_training_lpcxpresso_baseboard_led_simple/5zdne/" title="Published program: _training_lpcxpresso_baseboard_led_simple">_training_lpcxpresso_baseboard_led_simple</a></p> <p>Just a straight forward implementation sample of PCA9532 control. <br>It just send commands to blink the LEDs. <br>The code prepares the blinking pattern in array each bytes will be stored in its PCA9532's registers (from adress 0x6 to 0x9 (LED1..4), those registers has 2 setting bits for each single registers). <br>In those bit fields, the LED will be turned-ON when the bit is set as '01(binary)', and turned-OFF when both bits are cleared.</p> <p>This program is using "auto address increment feature" of PCA9532. <br>To set the all 16 LEDs, the program need to access 4 registers to set each byte data. <br>To minimize the effort to accessing registers, PCA9532 supports to do it in a sngle I2C transaction.</p> <p>The auto increment feature can be enabled by setting bit 4 as '1'of register address. <br>The auto increment does concecutive following data set into registers mapped in contiguous address. <br>In the sample code, transferring dara are prepared as array. First byte is for the register address 0x06 and auto increment flag. <br>With this setting, following 4 bytes data will be written into registers from 0x6 to 0x9. The data are prepared in 2D array (data[2][5]). The first row (data[0]) storing patten for OFF and other (data[1]) is ON.</p> <p>Refer to <a class="mcenp" href="http://mbed.org/users/okano/notebook/i2c-access-examples/" title="Notebook page: I2C access examples">I2C access examples</a> for more information about I2C access to PCA9532.</p> <pre><p style="margin: 0.0px 0.0px 0.0px 0.0px; font: 9.0px Monaco;">#include "mbed.h"</p>
<p style="margin: 0.0px 0.0px 0.0px 0.0px; font: 9.0px Monaco;">I2C i2c( p28, p26 );        // sda, scl</p>
<p style="margin: 0.0px 0.0px 0.0px 0.0px; font: 9.0px Monaco;">const int PCA9532_addr  = 0xC0; // define the I2C Address</p>
<p style="margin: 0.0px 0.0px 0.0px 0.0px; font: 9.0px Monaco;">const char  data[2][5]  = { { 0x16, 0x00, 0x00, 0x00, 0x00 },</p><p style="margin: 0.0px 0.0px 0.0px 0.0px; font: 9.0px Monaco;">　　　　　　　　　　　　　　　　　　　{ 0x16, 0x55, 0x55, 0x55, 0x55 } };</p><p style="margin: 0.0px 0.0px 0.0px 0.0px; font: 9.0px Monaco;"> </p><p style="margin: 0.0px 0.0px 0.0px 0.0px; font: 9.0px Monaco;">int main() {</p><p style="margin: 0.0px 0.0px 0.0px 0.0px; font: 9.0px Monaco;">　　　　char    i   = 0;</p>
<p style="margin: 0.0px 0.0px 0.0px 0.0px; font: 9.0px Monaco;">　　　　while ( 1 ) {</p><p style="margin: 0.0px 0.0px 0.0px 0.0px; font: 9.0px Monaco;">　　　　　　　　i2c.write( PCA9532_addr, data[ i++ &amp; 0x1 ], 5 );</p><p style="margin: 0.0px 0.0px 0.0px 0.0px; font: 9.0px Monaco;">　　　　　　　　wait( 0.5 );</p><p style="margin: 0.0px 0.0px 0.0px 0.0px; font: 9.0px Monaco;">　　　　}</p><p style="margin: 0.0px 0.0px 0.0px 0.0px; font: 9.0px Monaco;">}</p></pre> <h3>STEP2...</h3> <p><span> </span></p> <p>he 2nd target is a <strong>light sensor: ISL29003</strong> (I2C_address:0x88). <br>The program#2 shows a sample how to read registers in the device. <br>This program reads 16bit information from the light sensor and controls luminance/dimming leve of 16 LEDs.</p> <p>For the I2C device reading access, please refer to the notebook page <a class="mcenp" href="http://mbed.org/users/okano/notebook/i2c-access-examples/" title="Notebook page: I2C access examples">I2C access examples</a></p> <p>In the program#2, PCA9532 interface is defined differently.<br>It uses C++ style interface that helps accessing the device easier. <br>This will show the sample of overriding '=' operator to make simple interface to set the ilumination pattern.</p> <pre><p style="margin: 0.0px 0.0px 0.0px 0.0px; font: 9.0px Monaco;">class baseboard_led_array {</p><p style="margin: 0.0px 0.0px 0.0px 0.0px; font: 9.0px Monaco;">public:</p><p style="margin: 0.0px 0.0px 0.0px 0.0px; font: 9.0px Monaco;">    ...</p><p style="margin: 0.0px 0.0px 0.0px 0.0px; font: 9.0px Monaco;">    ...</p><p style="margin: 0.0px 0.0px 0.0px 0.0px; font: 9.0px Monaco;">    baseboard_led_array() {</p><p style="margin: 0.0px 0.0px 0.0px 0.0px; font: 9.0px Monaco;">        //  no initialization done</p><p style="margin: 0.0px 0.0px 0.0px 0.0px; font: 9.0px Monaco;">    }</p>
 <p style="margin: 0.0px 0.0px 0.0px 0.0px; font: 9.0px Monaco;">    void operator=( int c ) {</p><p style="margin: 0.0px 0.0px 0.0px 0.0px; font: 9.0px Monaco;">        char        a[ 5 ]  = { 0x16, 0x00, 0x00, 0x00, 0x00 };</p><p style="margin: 0.0px 0.0px 0.0px 0.0px; font: 9.0px Monaco;">        const char  v       = 0x2;</p>
<p style="margin: 0.0px 0.0px 0.0px 0.0px; font: 9.0px Monaco;">        for ( int i = 0; i &lt; 16; i++ )</p><p style="margin: 0.0px 0.0px 0.0px 0.0px; font: 9.0px Monaco;">            a[ (i / 4) + 1 ]  |= (((c &gt;&gt; i) &amp; 0x1) ? v : 0x0) &lt;&lt; ((i % 4) &lt;&lt; 1);</p>
<p style="margin: 0.0px 0.0px 0.0px 0.0px; font: 9.0px Monaco;">        i2c.write( PCA9532_addr, a, 5 );</p><p style="margin: 0.0px 0.0px 0.0px 0.0px; font: 9.0px Monaco;">    }</p><p style="margin: 0.0px 0.0px 0.0px 0.0px; font: 9.0px Monaco;">    ...</p><p style="margin: 0.0px 0.0px 0.0px 0.0px; font: 9.0px Monaco;">    ...</p><p style="margin: 0.0px 0.0px 0.0px 0.0px; font: 9.0px Monaco;">};</p></pre> <p><span> </span></p> <p>program_#2..."a version, with light sensor"</p> <p><a class="mcepp" href="http://mbed.org/users/okano/programs/_training_lpcxpresso_baseboard_led_w_light_sensor/5zelq/" title="Published program: _training_lpcxpresso_baseboard_led_w_light_sensor">_training_lpcxpresso_baseboard_led_w_light_sensor</a></p> <p>I2C data read from the register should be done by two I2C transactions.</p> <ol> <li>1. send (write) the device a resister address. </li> <li>2. read data from the device. </li> </ol> <p>This demo reads 16bit data by two transfers of one byte, for lower byte and upper byte.</p> <p>Since this program access two I2C devices, to make it simpler, the light sensor is also defined as a class using C++ feature.</p> <p>The classes (for PCA9532 and light sensor) are defined in main.cpp together. <br>In general, it may be better if the each class are defined in each .h and .cpp files, but here, it was made like this to have simple file structure in a project and it is not intended to use the class in other projects.</p> <pre><p style="margin: 0.0px 0.0px 0.0px 0.0px; font: 9.0px Monaco;">class light_sensor {</p><p style="margin: 0.0px 0.0px 0.0px 0.0px; font: 9.0px Monaco;">public:</p><p style="margin: 0.0px 0.0px 0.0px 0.0px; font: 9.0px Monaco;">    ...</p><p style="margin: 0.0px 0.0px 0.0px 0.0px; font: 9.0px Monaco;">    ...</p><p style="margin: 0.0px 0.0px 0.0px 0.0px; font: 9.0px Monaco;">    operator short( void ) {</p><p style="margin: 0.0px 0.0px 0.0px 0.0px; font: 9.0px Monaco;">        short   v;</p><p style="margin: 0.0px 0.0px 0.0px 0.0px; font: 9.0px Monaco;">        char    cmd;</p><p style="margin: 0.0px 0.0px 0.0px 0.0px; font: 9.0px Monaco;"> </p><p style="margin: 0.0px 0.0px 0.0px 0.0px; font: 9.0px Monaco;">        cmd    = 0x05;</p><p style="margin: 0.0px 0.0px 0.0px 0.0px; font: 9.0px Monaco;">        i2c.write( ISL29003_addr, &amp;cmd, 1 );</p><p style="margin: 0.0px 0.0px 0.0px 0.0px; font: 9.0px Monaco;">        i2c.read( ISL29003_addr, &amp;cmd, 1 );</p><p style="margin: 0.0px 0.0px 0.0px 0.0px; font: 9.0px Monaco;">        ...</p><p style="margin: 0.0px 0.0px 0.0px 0.0px; font: 9.0px Monaco;">    }</p></pre> <h3>STEP3...</h3> <p><span> </span></p> <p>Program#3 is just a simple derivative of #2.</p> <p>To control the speed of the LED blinking, a potentiometer (POT) is used on the base board. <br>The POT is connected to <strong>pin15</strong> of mbed. So it gives mbed (pin15) the voltage adjusted by its position.</p> <p>In the training session, this modification may done by attendee themselves. <br>It's just adding one line for "AnalogIn" instance declarationa and modification of "wait()" function argument.</p> <p>program_#3..."extended version"</p> <p>next code is a sample how the code can be modified.</p> <pre><p style="margin: 0.0px 0.0px 0.0px 0.0px; font: 9.0px Monaco;">...</p><p style="margin: 0.0px 0.0px 0.0px 0.0px; font: 9.0px Monaco;">...</p><p style="margin: 0.0px 0.0px 0.0px 0.0px; font: 9.0px Monaco;">baseboard_led_array     ledarr;</p><p style="margin: 0.0px 0.0px 0.0px 0.0px; font: 9.0px Monaco;">light_sensor            sensor;</p><p style="margin: 0.0px 0.0px 0.0px 0.0px; font: 9.0px Monaco;">AnalogIn                ain( p15 );</p><p style="margin: 0.0px 0.0px 0.0px 0.0px; font: 9.0px Monaco;"> </p><p style="margin: 0.0px 0.0px 0.0px 0.0px; font: 9.0px Monaco;">int main() {</p><p style="margin: 0.0px 0.0px 0.0px 0.0px; font: 9.0px Monaco;">    unsigned long   c           = 0x00000F0F;</p>
<p style="margin: 0.0px 0.0px 0.0px 0.0px; font: 9.0px Monaco;">    while ( 1 ) {</p><p style="margin: 0.0px 0.0px 0.0px 0.0px; font: 9.0px Monaco;">        a_pwm   = sensor &gt;&gt; 6;</p><p style="margin: 0.0px 0.0px 0.0px 0.0px; font: 9.0px Monaco;">        ledarr.pwm0( a_pwm &gt; 255 ? 255 : (unsigned char)a_pwm );</p><p style="margin: 0.0px 0.0px 0.0px 0.0px; font: 9.0px Monaco;"> </p><p style="margin: 0.0px 0.0px 0.0px 0.0px; font: 9.0px Monaco;">        c   &lt;&lt;= 1;</p><p style="margin: 0.0px 0.0px 0.0px 0.0px; font: 9.0px Monaco;">        c   |= c &amp; 0x10000 ? 0x1 : 0x0;</p><p style="margin: 0.0px 0.0px 0.0px 0.0px; font: 9.0px Monaco;">        ledarr   = c;</p> <p style="margin: 0.0px 0.0px 0.0px 0.0px; font: 9.0px Monaco;">        wait( (float)ain / 10.0 );    </p><p style="margin: 0.0px 0.0px 0.0px 0.0px; font: 9.0px Monaco;">    }</p><p style="margin: 0.0px 0.0px 0.0px 0.0px; font: 9.0px Monaco;">}</p></pre> <h2>How to use?</h2> <p>The simple version (program#1) is for just import, compile and run it. User can see the 16 LEDs are blinking. In the training session the I2C interface will be explained (relation between function call and actual signal going on the I2C lines) and basic register functions of PCA9532.</p> <p>The light sensor version is also for just import--&gt;compile--&gt;run. But when user find the program running, he/she can try to lid the light sensor's aperture.</p> <h2>Note:</h2> <p>Further modification may be possible, of course. <br>When atendee runs the program, they may notice the light sensor <strong>responce speed is slow</strong>. It's because the sampling interval of the light sensor is long. <br>It can be adjusted by two LSB bits in a register addressed by 0. <br>If the register byte is changed from 0x80 to 0x81, the response speed will be improved. <br>WIth this modification, the maximum value from light sensor will be 4 bit less, so shift operation at sonsor value reading may need to adjust accordingly.</p> <h2>Reference:</h2> <p>LPCXpresso base board<br><a href="http://www.embeddedartists.com/products/lpcxpresso/xpr_base.php">http://www.embeddedartists.com/products/lpcxpresso/xpr_base.php</a></p> <p>mbed library - I2C<br><a href="http://mbed.org/handbook/I2C">http://mbed.org/handbook/I2C</a></p> <p>I2C access examples<br> <a href="http://mbed.org/users/okano/notebook/i2c-access-examples/">http://mbed.org/users/okano/notebook/i2c-access-examples/</a></p> <p>PCA9532<br><a href="http://www.nxp.com/documents/data_sheet/PCA9532.pdf">http://www.nxp.com/documents/data_sheet/PCA9532.pdf</a></p> <p>ISL29003<br><a href="http://www.intersil.com/data/fn/FN7464.pdf">http://www.intersil.com/data/fn/FN7464.pdf</a></p> <hr> <hr> <p><a name="japanese"></a></p> <h2>これは？</h2> <p><a href="http://www.embeddedartists.com/products/lpcxpresso/xpr_base.php">LPCXpressoベースボード</a>」を用いたサンプル/デモ・コードです．<br><strong>「mbedは初めて」の人向け講習会の実習用</strong>に用意されました．</p> <p>なおLPCXpressoベースボードの詳細(回路図，ユーザマニュアル)は開発/販売元のEmbeddedArtistsのWebサイトで公開されています．</p> <p>これらについてはベースボードに添付されているシリアル番号を用いてユーザ登録を行うとアクセスできるようになります．詳細についてはそのWebサイトをご覧ください．</p> <h2>コード:</h2> <p>実習用として3つのプログラムを用意しました．それぞれ実習の各段階で使われることを想定しています．</p> <p>これらを通してベースボード上のI2Cデバイスにアクセスする方法を解説します．ベースボード上のI2Cバスはmbedの<strong>27ピン</strong>，<strong>28ピン</strong>に接続されています．</p> <h3>第一段階...</h3> <p>最初に操作してみるデバイスはI<strong>/Oエクスパンダ:PCA9532</strong>(I2Cアドレス:0xC0)です．このチップのポートには16個のLEDが接続されています．<br>このプログラムはI2Cのwrite関数でどのようにPCA9532にアクセスするかを示します．<br>実習ではI2Cアドレスを指定し，レジスタとデータがi2c.write()をコールして，どのように送られるかを見て見てみます．</p> <p>プログラム_#1...「簡単バージョン」</p> <p><a class="mcepp" href="http://mbed.org/users/okano/programs/_training_lpcxpresso_baseboard_led_simple/5zdne/" title="Published program: _training_lpcxpresso_baseboard_led_simple">_training_lpcxpresso_baseboard_led_simple</a></p> <p>最も単純なPCA9532制御の例で，LED点滅のコマンドを送るだけのものです．PCA9532のレジスタに設定するLEDの点滅パターン(レジスタ・アドレスと各レジスタの設定値)はプログラム内の配列に用意されます．<br> 各レジスタにセットされるデータは2ビット毎に分けられており，この各2ビットビットのフィールドを'(2進)01'に設定するとLED点灯，'00'にすると消灯となります．</p> <p>このプログラムではPCA9532の「オート・インクリメント」機能を使っています．</p> <p>16個のLEDすべてを操作するためには4つのレジスタにアクセスする必要がありますが，この個々のアクセスを別々に行うのは面倒なので，一度のI2C転送(トランザクション)にまとめることができるようにしたものです．<br> レジスタのアドレスを指定する際にビット4を1に設定することで「オート・インクリメント」が使えます．</p> <p>オート・インクリメントはそれに続くデータを，連続したレジスタにそれぞれ設定してくれます．サンプルコードではデータが配列に用意されており，第一バイト目のにレジスタアドレスとオートインクリメントフラグが指定されています．<br> この設定により続く4バイトのデータが0x6から0x9のレジスタにそれぞれ書かれることになります．データは2次元の配列に用意されており，最初の行(data[0])にOFF，次の行(data[1])にONのパターンが設定されています．</p> <p>I2Cを使ったPCA9532へのアクセスについてはこちら<a class="mcenp" href="http://mbed.org/users/okano/notebook/i2c-access-examples/" title="Notebook page: I2C access examples">I2C access examples</a>もご覧ください．</p> <pre style="margin-bottom: 1em; background-color: #ffffff; font-size: 1.1em; padding: 0.5em; border: 1px solid #cccccc;"><p style="margin: 0.0px 0.0px 0.0px 0.0px; font: 9.0px Monaco;">#include "mbed.h"</p>
<p style="margin: 0.0px 0.0px 0.0px 0.0px; font: 9.0px Monaco;">I2C i2c( p28, p26 );        // sda, scl</p>
<p style="margin: 0.0px 0.0px 0.0px 0.0px; font: 9.0px Monaco;">const int PCA9532_addr  = 0xC0; // define the I2C Address</p>
<p style="margin: 0.0px 0.0px 0.0px 0.0px; font: 9.0px Monaco;">const char  data[2][5]  = { { 0x16, 0x00, 0x00, 0x00, 0x00 },</p><p style="margin: 0.0px 0.0px 0.0px 0.0px; font: 9.0px Monaco;">　　　　　　　　　　　　　　　　　　　{ 0x16, 0x55, 0x55, 0x55, 0x55 } };</p><p style="margin: 0.0px 0.0px 0.0px 0.0px; font: 9.0px Monaco;"> </p><p style="margin: 0.0px 0.0px 0.0px 0.0px; font: 9.0px Monaco;">int main() {</p><p style="margin: 0.0px 0.0px 0.0px 0.0px; font: 9.0px Monaco;">　　　　char    i   = 0;</p>
<p style="margin: 0.0px 0.0px 0.0px 0.0px; font: 9.0px Monaco;">　　　　while ( 1 ) {</p><p style="margin: 0.0px 0.0px 0.0px 0.0px; font: 9.0px Monaco;">　　　　　　　　i2c.write( PCA9532_addr, data[ i++ &amp; 0x1 ], 5 );</p><p style="margin: 0.0px 0.0px 0.0px 0.0px; font: 9.0px Monaco;">　　　　　　　　wait( 0.5 );</p><p style="margin: 0.0px 0.0px 0.0px 0.0px; font: 9.0px Monaco;">　　　　}</p><p style="margin: 0.0px 0.0px 0.0px 0.0px; font: 9.0px Monaco;">}</p></pre> <h3 style="font-family: 'Trebuchet MS', sans-serif; font-weight: 700;">第二段階...</h3> <p>次のターゲットは<strong>光センサ:ISL29003</strong>(I2Cアドレス:0x88)です．</p> <p>プログラム_#2ではこのチップのレジスタをどのようにデータを読み出すかを示します．このプログラムでは環境光の状態を16ビットの情報として読み出し，それによって先ほどのLEDの輝度を変化させます．<br> I2Cの読み出しについては次のノートページ<a class="mcenp" href="http://mbed.org/users/okano/notebook/i2c-access-examples/" title="Notebook page: I2C access examples">I2C access examples</a>を参照してください．</p> <p>このプログラム_#2ではPCA9532のインターフェース(アクセス方法)に変更を加えてあります．デバイスへのアクセスを簡略化するためにC++のスタイルを用いています．この中では演算子の多重定義機能を用いてLEDの点灯パターンを代入演算で行えるようにしています．</p> <pre style="margin-bottom: 1em; background-color: #ffffff; font-size: 1.1em; padding: 0.5em; border: 1px solid #cccccc;"><p style="margin: 0.0px 0.0px 0.0px 0.0px; font: 9.0px Monaco;">class baseboard_led_array {</p><p style="margin: 0.0px 0.0px 0.0px 0.0px; font: 9.0px Monaco;">public:</p><p style="margin: 0.0px 0.0px 0.0px 0.0px; font: 9.0px Monaco;">    ...</p><p style="margin: 0.0px 0.0px 0.0px 0.0px; font: 9.0px Monaco;">    ...</p><p style="margin: 0.0px 0.0px 0.0px 0.0px; font: 9.0px Monaco;">    baseboard_led_array() {</p><p style="margin: 0.0px 0.0px 0.0px 0.0px; font: 9.0px Monaco;">        //  no initialization done</p><p style="margin: 0.0px 0.0px 0.0px 0.0px; font: 9.0px Monaco;">    }</p>
 <p style="margin: 0.0px 0.0px 0.0px 0.0px; font: 9.0px Monaco;">    void operator=( int c ) {</p><p style="margin: 0.0px 0.0px 0.0px 0.0px; font: 9.0px Monaco;">        char        a[ 5 ]  = { 0x16, 0x00, 0x00, 0x00, 0x00 };</p><p style="margin: 0.0px 0.0px 0.0px 0.0px; font: 9.0px Monaco;">        const char  v       = 0x2;</p>
<p style="margin: 0.0px 0.0px 0.0px 0.0px; font: 9.0px Monaco;">        for ( int i = 0; i &lt; 16; i++ )</p><p style="margin: 0.0px 0.0px 0.0px 0.0px; font: 9.0px Monaco;">            a[ (i / 4) + 1 ]  |= (((c &gt;&gt; i) &amp; 0x1) ? v : 0x0) &lt;&lt; ((i % 4) &lt;&lt; 1);</p>
<p style="margin: 0.0px 0.0px 0.0px 0.0px; font: 9.0px Monaco;">        i2c.write( PCA9532_addr, a, 5 );</p><p style="margin: 0.0px 0.0px 0.0px 0.0px; font: 9.0px Monaco;">    }</p><p style="margin: 0.0px 0.0px 0.0px 0.0px; font: 9.0px Monaco;">    ...</p><p style="margin: 0.0px 0.0px 0.0px 0.0px; font: 9.0px Monaco;">    ...</p><p style="margin: 0.0px 0.0px 0.0px 0.0px; font: 9.0px Monaco;">};</p></pre> <p><span> </span></p> <p>プログラム_#2...「光センサ・バージョン」</p> <p><a class="mcepp" href="http://mbed.org/users/okano/programs/_training_lpcxpresso_baseboard_led_w_light_sensor/5zelq/" title="Published program: _training_lpcxpresso_baseboard_led_w_light_sensor">_training_lpcxpresso_baseboard_led_w_light_sensor</a></p> <p>I2Cの読み出しは2回のI2Cトランザクションで行う必要があります．</p> <ol> <li>1. レジスタアドレスの送出(書き込み)</li> <li>2. データの読み出し</li> </ol> <p>このデモプログラムでは16ビットのデータの読み出しを2回の1バイト読み出しで行っています．</p> <p>またこのプログラムでは2個のI2Cデバイスを扱うため，その操作を簡略化するために光センサもC++の機能を用いて定義されています．<br> これらのクラス(PCA9532と光センサ)はmain.cpp内に一緒に定義されています．一般的にクラスは別個の.hや.cppファイル内に定義されるのが良いとされていますが，このサンプルコードではプロジェクト(ファイル構成)の単純化と，他での使い回しを考えないこととし，このようにしました．</p> <h3>第三段階…</h3> <p>プログラム_#3は，#2の単純な派生版です．</p> <p>LEDの点滅スピードを変更するためにベースボードの可変抵抗を使ってみます．この可変抵抗はmbedの15ピンにつながれています．このためこのツマミを回すとmbedのピン(15番)の電圧が変わります．<br> 実習では参加者それぞれにこの派生版を作成していただきます．</p> <p>実際に変更して頂くのはAnalogInインスタンスを作成する1行を追加し，wait()関数の呼び出し引数を変更するだけです．</p> <p>プログラム_#3...「拡張バージョン」</p> <p>次はコードをどのように変更するかの例です．</p> <pre style="margin-bottom: 1em; background-color: #ffffff; font-size: 1.1em; padding: 0.5em; border: 1px solid #cccccc;"><p style="margin: 0.0px 0.0px 0.0px 0.0px; font: 9.0px Monaco;">...</p><p style="margin: 0.0px 0.0px 0.0px 0.0px; font: 9.0px Monaco;">...</p><p style="margin: 0.0px 0.0px 0.0px 0.0px; font: 9.0px Monaco;">baseboard_led_array     ledarr;</p><p style="margin: 0.0px 0.0px 0.0px 0.0px; font: 9.0px Monaco;">light_sensor            sensor;</p><p style="margin: 0.0px 0.0px 0.0px 0.0px; font: 9.0px Monaco;">AnalogIn                ain( p15 );</p><p style="margin: 0.0px 0.0px 0.0px 0.0px; font: 9.0px Monaco;"> </p><p style="margin: 0.0px 0.0px 0.0px 0.0px; font: 9.0px Monaco;">int main() {</p><p style="margin: 0.0px 0.0px 0.0px 0.0px; font: 9.0px Monaco;">    unsigned long   c           = 0x00000F0F;</p>
<p style="margin: 0.0px 0.0px 0.0px 0.0px; font: 9.0px Monaco;">    while ( 1 ) {</p><p style="margin: 0.0px 0.0px 0.0px 0.0px; font: 9.0px Monaco;">        a_pwm   = sensor &gt;&gt; 6;</p><p style="margin: 0.0px 0.0px 0.0px 0.0px; font: 9.0px Monaco;">        ledarr.pwm0( a_pwm &gt; 255 ? 255 : (unsigned char)a_pwm );</p><p style="margin: 0.0px 0.0px 0.0px 0.0px; font: 9.0px Monaco;"> </p><p style="margin: 0.0px 0.0px 0.0px 0.0px; font: 9.0px Monaco;">        c   &lt;&lt;= 1;</p><p style="margin: 0.0px 0.0px 0.0px 0.0px; font: 9.0px Monaco;">        c   |= c &amp; 0x10000 ? 0x1 : 0x0;</p><p style="margin: 0.0px 0.0px 0.0px 0.0px; font: 9.0px Monaco;">        ledarr   = c;</p> <p style="margin: 0.0px 0.0px 0.0px 0.0px; font: 9.0px Monaco;">        wait( (float)ain / 10.0 );    </p><p style="margin: 0.0px 0.0px 0.0px 0.0px; font: 9.0px Monaco;">    }</p><p style="margin: 0.0px 0.0px 0.0px 0.0px; font: 9.0px Monaco;">}</p></pre> <h2>使い方:</h2> <p>簡単バージョン(プログラム_#1)は単純にインポートし，コンパイル，実行して動作を見ていただきます．実習ではコードを見ていただき，その動作とPCA9532の動作を確認いただきます．</p> <p>光センサ・バージョンもインポート--&gt;コンパイル--&gt;実行で動作を確認します．センサの受光部にを指で塞ぐなどして変化を見てみます．</p> <h2>注意:</h2> <p>もちろんこの他にも変更を加えることが可能でしょう．実習の参加者の中には光センサの反応スピードが遅いと感じる方もおられると思います．<br> この調整は光センサのレジスタ(アドレス0)の最下位2ビットで変更できます．このレジスタは初期化時に0x80に設定されていますが0x81にすると速度が改善されます．</p> <p>この変更により読み出されるセンサ値の最大値は4ビット分小さくなるので，読み出した後に行うシフト演算の値も変更すると良いでしょう．</p> <h2>参考資料:</h2> <p>LPCXpresso base board<br><a href="http://www.embeddedartists.com/products/lpcxpresso/xpr_base.php">http://www.embeddedartists.com/products/lpcxpresso/xpr_base.php</a></p> <p>mbed library - I2C<br><a href="http://mbed.org/handbook/I2C">http://mbed.org/handbook/I2C</a></p> <p>I2C access examples<br> <a href="http://mbed.org/users/okano/notebook/i2c-access-examples/">http://mbed.org/users/okano/notebook/i2c-access-examples/</a></p> <p>PCA9532<br><a href="http://www.nxp.com/documents/data_sheet/PCA9532.pdf">http://www.nxp.com/documents/data_sheet/PCA9532.pdf</a></p> <p>ISL29003<br><a href="http://www.intersil.com/data/fn/FN7464.pdf">http://www.intersil.com/data/fn/FN7464.pdf</a></p>