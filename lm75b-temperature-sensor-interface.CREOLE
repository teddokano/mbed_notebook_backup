<p>Here are two study projects to get data from I2C device(s).</p> <h2>What is this?</h2> <p>A sample code to get temperature values from two LM75B devices on same I2C bus.<br> The temperature read out will be shown on serial terminal on the PC screen.</p> <p><img alt="" height="267" src="http://mbed.org/media/uploads/okano/sensors.png" width="515"></p> <h2>Code:</h2> <p><a href="http://mbed.org/users/okano/programs/60d3e">LM75B_test:<br> http://mbed.org/users/okano/programs/60d3e</a></p> <p>This was written like C-language style.</p> <p><a href="http://mbed.org/users/okano/programs/5yg0k">TempSensor_LM75B<br> </a> <a href="http://mbed.org/users/okano/programs/5yg0k">http://mbed.org/users/okano/programs/5yg0k</a></p> <p><del><a href="http://mbed.org/users/okano/programs/5z9zq">LM75B_test2:<br> http://mbed.org/users/okano/programs/5z9zq</a></del> ** old version has been removed</p> <p>This was written in C++ style. The code is very simple in main() function. The temperature sensors are handled as each instances like mbed's AnalogIn interface.</p> <p>This project requires two header files which defines classes.<br> "I2cBusDevice.h" is a generic class for I2C devices.<br> "TempSensor_L75B.h" is a derived class of I2cBusDevice.</p> <h2>Note:</h2> <p>Both of those programs can drive two LM75B devices. These two sensors should have different I2C address setting using its address pins (LM75B's A0 to A2 (pins 5 to 7)).<br> One LM75B should have all those pins tied to GND, and the other should have the pin A0(pin7) pulled-up.</p> <p>From the software, those devices can be accessed by I2C addresses "0x90" and "0x92".<br> It will not be as "0x90" and "0x91" since the address has 7 bit only and stuffed to left. So the "A0" setting become second bit from LSB.<br> The LSB does not care because it will be set by I2C libraly when it transfer the data for read and write.</p> <p>On these programs, expecting to use the pins 9 and 10 for I2C bus and these pins should be pulled-up properly.</p> <h2>Reference:</h2> <p><a href="http://mbed.org/www.nxp.com/pip/LM75B_2.html">LM75B datasheet<br>www.nxp.com/pip/LM75B_2.html</a></p> <p> </p> <h2>これは？</h2> <p>I2C上に接続された2個の温度センサLM75Bから温度データを受け取るサンプルコードです．<br> 温度の情報はUSBシリアルで接続されたPC上のターミナルに表示されます．</p> <p><img alt="" height="267" src="http://mbed.org/media/uploads/okano/sensors.png" width="515"></p> <h2>コード</h2> <p>上記「Code」の項のリンクを参照．「LM75B_test」はC言語ライクな記述，「TempSensor_L75B」はC++的な記述を取り入れ，main関数内をシンプルにしました．温度センサは，ちょうどmbedのAnalogInのようなインスタンスとして扱われます．</p> <p>このプロジェクト(プログラム)には2つのヘッダファイルを用います．<br> 「I2cBusDevice.h」はI2Cデバイスのベースクラスとして，「TempSensor_L75B.h」はそこからの派生クラスとして使われます．</p> <h2>注意</h2> <p>この二つのサンプルプログラムは(同一I2Cバス上の)2個の温度センサからデータを受けるようにしてあります．これを行うため各温度センサには，そのチップの5ピン～7ピン(A2..A0)を使って，別のI2Cバス・アドレスを設定しておきます．<br> 一方のLM75Bは，これらのすべてのピンをGNDに接続，もう一方はピン5(A0)だけをプルアップしておきます．</p> <p>ソフトウェアからそれぞれのデバイスへのアクセスはI2Cバス・アドレス0x90と0x92で行います．<br> アクセスするアドレスは0x90と0x91とはなりません．デバイスで設定するA0はI2Cアドレスを設定する変数の最下位ビット(LSB)とはならず，下から2番目のビットとなるためです．<br> アドレス変数のLSBは「Don't care」となります．I2Cライブラリがリード/ライトの転送方向に合わせて上書きするためです．</p> <p>このサンプルプログラムではI2Cバスにmbedの9ピンと10ピンを使います．これらのピンは適切にプルアップされてなくてはなりません．</p> <h2>参考</h2> <p>上記「Reference」の項を参照</p>